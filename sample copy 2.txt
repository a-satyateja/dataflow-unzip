To ingest data into a pipeline, we need to read data, so we can read data from text, from Big Table, from BigQuery, from Pub/Sub, from a variety of different sources. So, from text you basically do a textio.read from, some file on cloud storage but it doesn't need to be a single file, you could have a wildcard in here. So you are reading from a bunch of files on cloud storage. This lines now represents the P-collection of lines that are read from these files whether it is one file or multiple files, But is a P-collection. So what that means, is that it's not all in memory at the same time but you will get to process all of these lines in your data pipeline. The other input instead of TextIO, you could have PubsubIO, in which case you are reading from an input topic, or if you may be reading from BigQuery, so you could have a query and you could say BigQueryIO read from a particular query passing in the query itself, and what you will get back here is a P-collection of tabled rows. So you can go to the table row and you can get the value for a specific column.
1:23
Now, whatever you can read you can also write. So you can write into TextIO, so TextIO.Write to /data/output with the suffix. Now the thing to remember is that data-flow is meant for big data of streaming data, so what this means is that when you write things out they're going to get sharded, they are going to get split and written out into multiple files. But what if you are writing just a really small file, you're writing a file of 100 numbers? It can be annoying to basically see the sharding syntax 0 of 36, 1 of 36 et cetera. So if you don't want sharding of your output, if you want the output to explicitly go to the file that you set, /data/output.csv, without the 0 of 36 and 1 of 36 stuff, then you can add it without sharding. But remember that whenever you do that without sharding, your essentially forced all of the writing to happen on a single machine. So definitely not the recommended thing to do, but if you have a really small file and you want to control the naming of this file in a very deterministic way, then you can use without sharding. Now, TextIO only writes out strings. So if you have a P-collection of something else, if you have a P-collection of integers, you have a collection of anything else, P-collection of your user-defined objects, then what you will have to do is that you will have to take your P-collection and then transform each of